name: Deploy Mediawiki Application

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Get AKS credentials
      run: az aks get-credentials --resource-group mediawiki-rg --name mediawiki-aks

    - name: Ensure ACR Pull Secret
      run: |
        kubectl delete secret acr-secret --ignore-not-found
        kubectl create secret docker-registry acr-secret \
          --docker-server=${{ secrets.ACR_LOGIN_SERVER }} \
          --docker-username=${{ secrets.ACR_ADMIN_USERNAME }} \
          --docker-password=${{ secrets.ACR_ADMIN_PASSWORD }} \
          --docker-email=unused
    
    # - name: Generate Docker config JSON
    #   id: docker_config
    #   run: |
    #     DOCKER_CONFIG_JSON=$(echo -n "{\"auths\":{\"mediawikideployacr01.azurecr.io\":{\"username\":\"${{ secrets.ACR_ADMIN_USERNAME }}\",\"password\":\"${{ secrets.ACR_ADMIN_PASSWORD }}\",\"email\":\"\"}}}")
    #     echo "DOCKER_CONFIG_JSON=$DOCKER_CONFIG_JSON" >> $GITHUB_ENV

    # - name: Deploy ACR Secret
    #   run: |
    #     helm upgrade --install common ./common/chart --set acr.dockerconfigjson=${{ env.DOCKER_CONFIG_JSON }}

    - name: Add Ingress-NGINX Helm Repo
      run: |
        helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
        helm repo update

    - name: Install NGINX Ingress Controller
      run: |
          helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
            --namespace ingress-nginx --create-namespace \
            --set controller.replicaCount=2 

    - name: Verify NGINX Ingress Controller Pods
      run: |
        kubectl get pods -n ingress-nginx -l app.kubernetes.io/name=ingress-nginx

    - name: Wait for NGINX Ingress Controller Pods to be Ready
      run: |
        while [[ $(kubectl get pods -n ingress-nginx -l app.kubernetes.io/name=ingress-nginx -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}') != "True True" ]]; do
          echo "Waiting for NGINX Ingress Controller pods to be ready..."
          sleep 10
        done
      
    - name: Wait for NGINX Ingress Controller Services to be Ready
      run: |
        while [[ $(kubectl get svc -n ingress-nginx -l app.kubernetes.io/name=ingress-nginx -o 'jsonpath={..status.loadBalancer.ingress[0].ip}') == "" ]]; do
          echo "Waiting for NGINX Ingress Controller services to be ready..."
          sleep 10
        done

    - name: Verify NGINX Ingress Controller Services
      run: |
        kubectl get svc -n ingress-nginx -l app.kubernetes.io/name=ingress-nginx
      
    - name: Deploy MariaDB
      run: |
        helm upgrade --install mariadb ./mariadb/chart \
          --set rootUser.password=${{ secrets.MYSQL_ROOT_PASSWORD }} \
          --set db.user=${{ secrets.MYSQL_USER }} \
          --set db.password=${{ secrets.MYSQL_PASSWORD }} \
          --set db.name=${{ vars.MYSQL_DATABASE }}

    - name: Deploy MediaWiki
      run: |
        helm upgrade --install mediawiki ./mediawiki/chart \
          --set externalDatabase.password=${{ secrets.MYSQL_PASSWORD }}

    - name: Verify MediaWiki Deployment and Pods
      run: |
        kubectl get deployment mediawiki -n default
        kubectl get pods -n default -l app=mediawiki
  
    - name: Check Logs for MediaWiki Pods
      run: |
        kubectl logs -n default -l app=mediawiki
  
    - name: Verify MediaWiki Service
      run: |
        kubectl get svc mediawiki -n default -o yaml
  
    - name: Verify MediaWiki Ingress
      run: |
        kubectl get ingress mediawiki -n default -o yaml

    - name: Check Ingress Controller Logs
      run: |
        kubectl logs -n ingress-nginx -l app.kubernetes.io/name=ingress-nginx

    - name: Verify DNS Resolution
      run: |
        nslookup mediawiki.deployment.com

    - name: Verify Ingress Controller Connectivity to MediaWiki Service
      run: |
        kubectl run -i --tty --rm debug --image=busybox --restart=Never -- wget -qO- http://mediawiki.default.svc.cluster.local


  
